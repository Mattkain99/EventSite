// <auto-generated />
using System;
using EventSiteAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EventSiteAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("EventSiteAPI.Models.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Campus", "EventSite");
                });

            modelBuilder.Entity("EventSiteAPI.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("char(5)");

                    b.HasKey("Id");

                    b.ToTable("City", "EventSite");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Infos")
                        .HasColumnType("text");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubscribeDeadline")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Event", "EventSite");
                });

            modelBuilder.Entity("EventSiteAPI.Models.EventReveller", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RevellerId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "RevellerId");

                    b.HasIndex("RevellerId");

                    b.ToTable("EventReveller", "EventSite");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Place", "EventSite");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Reveller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Reveller", "EventSite");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Event", b =>
                {
                    b.HasOne("EventSiteAPI.Models.Campus", "Campus")
                        .WithMany("Events")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSiteAPI.Models.Reveller", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSiteAPI.Models.Place", "Place")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Creator");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("EventSiteAPI.Models.EventReveller", b =>
                {
                    b.HasOne("EventSiteAPI.Models.Event", "Event")
                        .WithMany("EventRevellers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventSiteAPI.Models.Reveller", "Reveller")
                        .WithMany("EventRevellers")
                        .HasForeignKey("RevellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Reveller");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Place", b =>
                {
                    b.HasOne("EventSiteAPI.Models.City", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Reveller", b =>
                {
                    b.HasOne("EventSiteAPI.Models.Campus", "Campus")
                        .WithMany("Revellers")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Campus", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Revellers");
                });

            modelBuilder.Entity("EventSiteAPI.Models.City", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Event", b =>
                {
                    b.Navigation("EventRevellers");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Place", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventSiteAPI.Models.Reveller", b =>
                {
                    b.Navigation("EventRevellers");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
